version: "3.9"

x-env: &default-env
  TZ: Europe/Paris
  APP_ENV: dev

services:
  web:
    image: nginx:1.27-alpine
    depends_on:
      api:
        condition: service_started
    ports:
      - "8080:80"
    volumes:
      - ./backend/public:/var/www/html/public:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    environment: *default-env

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        UID: ${UID-1000}
        GID: ${GID-1000}
    working_dir: /var/www/html
    command: php-fpm
    environment:
      <<: *default-env
      DATABASE_URL: "postgresql://app:app@db:5432/app?serverVersion=16&charset=utf8"
      REDIS_URL: "redis://cache:6379"
      MAILER_DSN: "smtp://mailhog:1025"
    volumes:
      - ./backend:/var/www/html
      - composer-cache:/tmp/composer-cache
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_started
      mailhog:
        condition: service_started

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        UID: ${UID-1000}
        GID: ${GID-1000}
    working_dir: /var/www/html
    command: php bin/console messenger:consume async -vv
    environment:
      <<: *default-env
      DATABASE_URL: "postgresql://app:app@db:5432/app?serverVersion=16&charset=utf8"
      REDIS_URL: "redis://cache:6379"
      MAILER_DSN: "smtp://mailhog:1025"
    volumes:
      - ./backend:/var/www/html
      - composer-cache:/tmp/composer-cache
    depends_on:
      api:
        condition: service_started

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      TZ: Europe/Paris
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d app"]
      interval: 5s
      timeout: 3s
      retries: 20

  cache:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025"

  adminer:
    image: adminer:4
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8081:8080"

  front:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    working_dir: /app
    command: sh -c "npm ci || npm i && npm run dev -- --host 0.0.0.0"
    ports:
      - "5173:5173"
    environment:
      <<: *default-env
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
      VITE_FS_STRICT: "false"
    volumes:
      - ./frontend:/app
      - npm-cache:/root/.npm

volumes:
  pgdata:
  composer-cache:
  npm-cache: